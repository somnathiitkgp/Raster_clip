# -*- coding: utf-8 -*-
"""
Created on Mon Feb 17 18:55:41 2025

@author: sp1v23
"""

import os
import geopandas as gpd
import rasterio
from rasterio.mask import mask
from shapely.geometry import mapping
from shapely.geometry import box

# Input paths
raster_dir = "Z:/EOCIS/Som_P/15 days/2023/20m/1_LAI"
output_dir = "Z:/Som_P/WCC/clipped_raster/2023/20m/NF/LAI"

# Ensure output directory exists
os.makedirs(output_dir, exist_ok=True)

# Bounding box (EPSG:4326)
bbox = [-1.9573, 50.7057, -1.3013, 51.0094]

# Create GeoDataFrame and reproject
gdf = gpd.GeoDataFrame({'geometry': [box(*bbox)]}, crs="EPSG:4326")
gdf_27700 = gdf.to_crs(epsg=27700)
geom = gdf_27700.geometry.iloc[0]

# Process all .geotif files
for raster_file in os.listdir(raster_dir):
    if raster_file.endswith(".tif"):
        raster_path = os.path.join(raster_dir, raster_file)
        output_path = os.path.join(output_dir, f"NewFor_clipped_{raster_file}")

        src = rasterio.open(raster_path)  
        out_image, out_transform = mask(src, [mapping(geom)], crop=True)

        if out_image.size == 0:
            print(f"Skipping {raster_file}: No data in clipped area")
        else:
            out_meta = src.meta.copy()
            out_meta.update({
                "driver": "GTiff",
                "height": out_image.shape[1],
                "width": out_image.shape[2],
                "transform": out_transform,
                "crs": src.crs,
                "nodata": src.nodata
            })

            dest = rasterio.open(output_path, "w", **out_meta)  
            dest.write(out_image)
            dest.close()  
            print(f"Clipped: {output_path}")

        src.close() 



































# Define bounding box (forest area)
bbox = [50.7057, -1.9573, 51.0094, -1.3013]  # (min_lat, min_lon, max_lat, max_lon)

def read_raster(file_path):
    """Read a raster file and return its dataset and array."""
    with rasterio.open(file_path) as src:
        return src, src.read(1)  # Read first band

def clip_raster_to_bbox(dataset, bbox):
    """Clip raster to bounding box and return the masked array."""
    minx, miny, maxx, maxy = bbox  # Bounding box coordinates
    
    # Convert lat/lon bounding box to raster projection
    bbox_geom = box(minx, miny, maxx, maxy)
    bbox_gdf = gpd.GeoDataFrame({"geometry": [bbox_geom]}, crs="EPSG:4326")  
    bbox_gdf = bbox_gdf.to_crs(dataset.crs)  # Transform bbox to raster's CRS

    # Mask the raster using the transformed bounding box
    clipped_array, _ = mask(dataset, bbox_gdf.geometry, crop=True)
    return clipped_array[0]  # Extract the array (first band)

def compute_similarity_map(clipped_lai, reference_lai, window_size=12):
    """
    Compute percentage similarity for each 12-pixel window in the clipped LAI raster.
    """
    clipped_flat = clipped_lai.flatten()
    reference_median = np.median(reference_lai.flatten())

    similarity_map = np.full(len(clipped_flat), np.nan)  # Create an array filled with NaNs

    for i in range(len(clipped_flat) - window_size + 1):
        window_median = np.median(clipped_flat[i : i + window_size])
        percent_diff = abs(window_median - reference_median) / (reference_median + 1e-6) * 100  # Avoid div by zero
        similarity_map[i] = percent_diff  # Store in array

    return similarity_map.reshape(clipped_lai.shape)  # Reshape back to raster dimensions

def plot_similarity_map(similarity_array, title="Similarity Heatmap"):
    """Plot the similarity map with a color bar."""
    plt.figure(figsize=(10, 6))
    plt.imshow(similarity_array, cmap="coolwarm", interpolation="nearest")
    plt.colorbar(label="Percentage Difference (%)")
    plt.title(title)
    plt.xlabel("Pixel X")
    plt.ylabel("Pixel Y")
    plt.show()

# File paths (update if needed)
uk_lai_path = "UK_LAI.tif"
nf1_lai_path = "NF1_LAI_median.tif"

# Load raster data
uk_lai_dataset, uk_lai_data = read_raster(uk_lai_path)
nf1_lai_dataset, nf1_lai_data = read_raster(nf1_lai_path)

# Clip UK_LAI.tif to the bounding box area
clipped_lai_data = clip_raster_to_bbox(uk_lai_dataset, bbox)

# Compute similarity values for each 12-pixel window
similarity_map = compute_similarity_map(clipped_lai_data, nf1_lai_data)

# Plot the similarity map with a color bar
plot_similarity_map(similarity_map)
